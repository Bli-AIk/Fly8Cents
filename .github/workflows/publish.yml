name: Publish Avalonia App

env:
  ProjectName: Fly8Cents
  Configuration: Release
  PublishFilePath: Publish

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  get_tag:
    name: Get Release Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag-step.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get tag version
        id: get-tag-step
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=manual-$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
          else
            echo "tag=$(git describe --tags --always)" >> $GITHUB_OUTPUT
          fi

  Publish:
    name: Publish on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: get_tag
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install AvaloniaUI prerequisites (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxext-dev libxcursor-dev libxfixes-dev libxi-dev libgdk-pixbuf2.0-dev libglib2.0-dev

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish Windows x86
        if: matrix.os == 'windows-latest'
        run: dotnet publish ./${{ env.ProjectName }}/${{ env.ProjectName }}.csproj -c ${{ env.Configuration }} -r win-x86 --self-contained -o ${{ env.PublishFilePath }}/win-x86

      - name: Build and Publish Linux x64
        if: matrix.os == 'ubuntu-latest'
        run: dotnet publish ./${{ env.ProjectName }}/${{ env.ProjectName }}.csproj -c ${{ env.Configuration }} -r linux-x64 --self-contained -o ${{ env.PublishFilePath }}/linux-x64

      - name: Build and Publish macOS x64
        if: matrix.os == 'macos-latest'
        run: dotnet publish ./${{ env.ProjectName }}/${{ env.ProjectName }}.csproj -c ${{ env.Configuration }} -r osx-x64 --self-contained -o ${{ env.PublishFilePath }}/macos-x64

      - name: Create Windows x86 archive
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          Compress-Archive -Path ${{ env.PublishFilePath }}\win-x86 -DestinationPath ${{ env.PublishFilePath }}\${{ env.ProjectName }}_win-x86.zip

      - name: Create Linux x64 archive
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          tar -czvf ${{ env.PublishFilePath }}/${{ env.ProjectName }}_linux-x64.tar.gz -C ${{ env.PublishFilePath }} linux-x64

      - name: Create macOS x64 archive
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          tar -czvf ${{ env.PublishFilePath }}/${{ env.ProjectName }}_macos-x64.tar.gz -C ${{ env.PublishFilePath }} macos-x64

      - name: Upload artifacts to Release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ProjectName }}-${{ matrix.os }}-build
          path: ${{ env.PublishFilePath }}/
  
  Create_Release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [Publish, get_tag]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "**/*"
          tag: ${{ needs.get_tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ needs.get_tag.outputs.tag }}
          prerelease: false
          body: |
            # Release Notes
            - Automatically published via GitHub Actions.
            - This release includes builds for Windows (x86), Linux (x64), and macOS (x64).