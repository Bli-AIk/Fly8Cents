// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var videoKeywordQueryData = VideoKeywordQueryData.FromJson(jsonString);

namespace QuickType.VideoKeywordQuery
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VideoKeywordQueryData
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("message")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Message { get; set; }

        [JsonProperty("ttl")]
        public long Ttl { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("archives")]
        public Archive[] Archives { get; set; }

        [JsonProperty("page")]
        public Page Page { get; set; }
    }

    public partial class Archive
    {
        [JsonProperty("aid")]
        public long Aid { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("pubdate")]
        public long Pubdate { get; set; }

        [JsonProperty("ctime")]
        public long Ctime { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("pic")]
        public Uri Pic { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("stat")]
        public Stat Stat { get; set; }

        [JsonProperty("bvid")]
        public string Bvid { get; set; }

        [JsonProperty("ugc_pay")]
        public long UgcPay { get; set; }

        [JsonProperty("interactive_video")]
        public bool InteractiveVideo { get; set; }

        [JsonProperty("enable_vt")]
        public long EnableVt { get; set; }

        [JsonProperty("vt_display")]
        public string VtDisplay { get; set; }

        [JsonProperty("playback_position")]
        public long PlaybackPosition { get; set; }
    }

    public partial class Stat
    {
        [JsonProperty("view")]
        public long View { get; set; }
    }

    public partial class Page
    {
        [JsonProperty("num")]
        public long Num { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class VideoKeywordQueryData
    {
        public static VideoKeywordQueryData FromJson(string json) => JsonConvert.DeserializeObject<VideoKeywordQueryData>(json, QuickType.VideoKeywordQuery.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VideoKeywordQueryData self) => JsonConvert.SerializeObject(self, QuickType.VideoKeywordQuery.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
