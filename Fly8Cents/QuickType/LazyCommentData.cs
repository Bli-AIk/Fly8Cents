// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var lazyCommentData = LazyCommentData.FromJson(jsonString);

namespace QuickType.LazyComment
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LazyCommentData
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("message")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Message { get; set; }

        [JsonProperty("ttl")]
        public long Ttl { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("cursor")]
        public Cursor Cursor { get; set; }

        [JsonProperty("replies")]
        public Reply[] Replies { get; set; }
    }

    public partial class Cursor
    {
        [JsonProperty("is_begin")]
        public bool IsBegin { get; set; }

        [JsonProperty("prev")]
        public long Prev { get; set; }

        [JsonProperty("next")]
        public long Next { get; set; }

        [JsonProperty("is_end")]
        public bool IsEnd { get; set; }

        [JsonProperty("all_count")]
        public long AllCount { get; set; }
    }

    public partial class Reply
    {
        [JsonProperty("rpid")]
        public long Rpid { get; set; }

        [JsonProperty("ctime")]
        public long Ctime { get; set; }

        [JsonProperty("like")]
        public long Like { get; set; }

        [JsonProperty("member")]
        public Member Member { get; set; }

        [JsonProperty("content")]
        public Content Content { get; set; }

        [JsonProperty("reply_control")]
        public ReplyControl ReplyControl { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("emote", NullValueHandling = NullValueHandling.Ignore)]
        public Emote Emote { get; set; }
    }

    public partial class Emote
    {
        [JsonProperty("[辣眼睛]")]
        public Uri 辣眼睛 { get; set; }
    }

    public partial class Member
    {
        [JsonProperty("mid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Mid { get; set; }

        [JsonProperty("uname")]
        public string Uname { get; set; }

        [JsonProperty("avatar")]
        public Uri Avatar { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("sign")]
        public string Sign { get; set; }

        [JsonProperty("vipType")]
        public long VipType { get; set; }
    }

    public partial class ReplyControl
    {
        [JsonProperty("time_desc")]
        public string TimeDesc { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }
    }

    public partial class LazyCommentData
    {
        public static LazyCommentData FromJson(string json) => JsonConvert.DeserializeObject<LazyCommentData>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LazyCommentData self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
