// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType.UserSpaceData;
//
//    var userSpaceData = UserSpaceData.FromJson(jsonString);

namespace QuickType.UserSpaceData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UserSpaceData
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("message")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Message { get; set; }

        [JsonProperty("ttl")]
        public long Ttl { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("has_more")]
        public bool HasMore { get; set; }

        [JsonProperty("items")]
        public DataItem[] Items { get; set; }

        [JsonProperty("offset")]
        public string Offset { get; set; }

        [JsonProperty("update_baseline")]
        public string UpdateBaseline { get; set; }

        [JsonProperty("update_num")]
        public long UpdateNum { get; set; }
    }

    public partial class DataItem
    {
        [JsonProperty("basic")]
        public Basic Basic { get; set; }

        [JsonProperty("modules")]
        public ItemModules Modules { get; set; }

        [JsonProperty("orig", NullValueHandling = NullValueHandling.Ignore)]
        public Orig Orig { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }
    }

    public partial class Basic
    {
        [JsonProperty("comment_id_str")]
        public string CommentIdStr { get; set; }

        [JsonProperty("comment_type")]
        public long CommentType { get; set; }

        [JsonProperty("like_icon")]
        public LikeIcon LikeIcon { get; set; }

        [JsonProperty("rid_str")]
        public string RidStr { get; set; }
    }

    public partial class LikeIcon
    {
        [JsonProperty("action_url")]
        public string ActionUrl { get; set; }

        [JsonProperty("end_url")]
        public string EndUrl { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("start_url")]
        public string StartUrl { get; set; }
    }

    public partial class ItemModules
    {
        [JsonProperty("module_author")]
        public ModuleAuthor ModuleAuthor { get; set; }

        [JsonProperty("module_dynamic")]
        public ModuleDynamic ModuleDynamic { get; set; }

        [JsonProperty("module_more")]
        public ModuleMore ModuleMore { get; set; }

        [JsonProperty("module_stat")]
        public ModuleStat ModuleStat { get; set; }

        [JsonProperty("module_tag", NullValueHandling = NullValueHandling.Ignore)]
        public ModuleTag ModuleTag { get; set; }
    }

    public partial class ModuleAuthor
    {
        [JsonProperty("face")]
        public Uri Face { get; set; }

        [JsonProperty("face_nft")]
        public bool FaceNft { get; set; }

        [JsonProperty("following")]
        public object Following { get; set; }

        [JsonProperty("jump_url")]
        public string JumpUrl { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("mid")]
        public long Mid { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("official_verify")]
        public OfficialVerify OfficialVerify { get; set; }

        [JsonProperty("pendant")]
        public Pendant Pendant { get; set; }

        [JsonProperty("pub_action")]
        public string PubAction { get; set; }

        [JsonProperty("pub_location_text", NullValueHandling = NullValueHandling.Ignore)]
        public string PubLocationText { get; set; }

        [JsonProperty("pub_time")]
        public string PubTime { get; set; }

        [JsonProperty("pub_ts")]
        public long PubTs { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("vip")]
        public Vip Vip { get; set; }

        [JsonProperty("decorate", NullValueHandling = NullValueHandling.Ignore)]
        public Decorate Decorate { get; set; }
    }

    public partial class Decorate
    {
        [JsonProperty("card_url")]
        public Uri CardUrl { get; set; }

        [JsonProperty("fan")]
        public Fan Fan { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("jump_url")]
        public Uri JumpUrl { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Fan
    {
        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("is_fan")]
        public bool IsFan { get; set; }

        [JsonProperty("num_str")]
        public string NumStr { get; set; }

        [JsonProperty("number")]
        public long Number { get; set; }
    }

    public partial class OfficialVerify
    {
        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Pendant
    {
        [JsonProperty("expire")]
        public long Expire { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("image_enhance")]
        public string ImageEnhance { get; set; }

        [JsonProperty("image_enhance_frame")]
        public string ImageEnhanceFrame { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("pid")]
        public long Pid { get; set; }
    }

    public partial class Vip
    {
        [JsonProperty("avatar_subscript")]
        public long AvatarSubscript { get; set; }

        [JsonProperty("avatar_subscript_url")]
        public string AvatarSubscriptUrl { get; set; }

        [JsonProperty("due_date")]
        public long DueDate { get; set; }

        [JsonProperty("label")]
        public Label Label { get; set; }

        [JsonProperty("nickname_color")]
        public string NicknameColor { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("theme_type")]
        public long ThemeType { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Label
    {
        [JsonProperty("bg_color")]
        public string BgColor { get; set; }

        [JsonProperty("bg_style")]
        public long BgStyle { get; set; }

        [JsonProperty("border_color")]
        public string BorderColor { get; set; }

        [JsonProperty("img_label_uri_hans")]
        public string ImgLabelUriHans { get; set; }

        [JsonProperty("img_label_uri_hans_static")]
        public Uri ImgLabelUriHansStatic { get; set; }

        [JsonProperty("img_label_uri_hant")]
        public string ImgLabelUriHant { get; set; }

        [JsonProperty("img_label_uri_hant_static")]
        public Uri ImgLabelUriHantStatic { get; set; }

        [JsonProperty("label_theme")]
        public string LabelTheme { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("text_color")]
        public string TextColor { get; set; }

        [JsonProperty("use_img_label")]
        public bool UseImgLabel { get; set; }
    }

    public partial class ModuleDynamic
    {
        [JsonProperty("additional")]
        public object Additional { get; set; }

        [JsonProperty("desc")]
        public Desc Desc { get; set; }

        [JsonProperty("major")]
        public Major Major { get; set; }

        [JsonProperty("topic")]
        public object Topic { get; set; }
    }

    public partial class Desc
    {
        [JsonProperty("rich_text_nodes")]
        public RichTextNode[] RichTextNodes { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class RichTextNode
    {
        [JsonProperty("orig_text")]
        public string OrigText { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("jump_url", NullValueHandling = NullValueHandling.Ignore)]
        public string JumpUrl { get; set; }

        [JsonProperty("emoji", NullValueHandling = NullValueHandling.Ignore)]
        public Emoji Emoji { get; set; }

        [JsonProperty("rid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Rid { get; set; }
    }

    public partial class Emoji
    {
        [JsonProperty("icon_url")]
        public Uri IconUrl { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Major
    {
        [JsonProperty("draw", NullValueHandling = NullValueHandling.Ignore)]
        public Draw Draw { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("archive", NullValueHandling = NullValueHandling.Ignore)]
        public Archive Archive { get; set; }
    }

    public partial class Archive
    {
        [JsonProperty("aid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Aid { get; set; }

        [JsonProperty("badge")]
        public Badge Badge { get; set; }

        [JsonProperty("bvid")]
        public string Bvid { get; set; }

        [JsonProperty("cover")]
        public Uri Cover { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("disable_preview")]
        public long DisablePreview { get; set; }

        [JsonProperty("duration_text")]
        public string DurationText { get; set; }

        [JsonProperty("jump_url")]
        public string JumpUrl { get; set; }

        [JsonProperty("stat")]
        public Stat Stat { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Badge
    {
        [JsonProperty("bg_color")]
        public string BgColor { get; set; }

        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Stat
    {
        [JsonProperty("danmaku")]
        public string Danmaku { get; set; }

        [JsonProperty("play")]
        public string Play { get; set; }
    }

    public partial class Draw
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("items")]
        public DrawItem[] Items { get; set; }
    }

    public partial class DrawItem
    {
        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("size")]
        public double Size { get; set; }

        [JsonProperty("src")]
        public Uri Src { get; set; }

        [JsonProperty("tags")]
        public object[] Tags { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class ModuleMore
    {
        [JsonProperty("three_point_items")]
        public ThreePointItem[] ThreePointItems { get; set; }
    }

    public partial class ThreePointItem
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class ModuleStat
    {
        [JsonProperty("comment")]
        public Comment Comment { get; set; }

        [JsonProperty("forward")]
        public Comment Forward { get; set; }

        [JsonProperty("like")]
        public Like Like { get; set; }
    }

    public partial class Comment
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("forbidden")]
        public bool Forbidden { get; set; }
    }

    public partial class Like
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("forbidden")]
        public bool Forbidden { get; set; }

        [JsonProperty("status")]
        public bool Status { get; set; }
    }

    public partial class ModuleTag
    {
        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Orig
    {
        [JsonProperty("basic")]
        public Basic Basic { get; set; }

        [JsonProperty("modules")]
        public OrigModules Modules { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }
    }

    public partial class OrigModules
    {
        [JsonProperty("module_author")]
        public ModuleAuthor ModuleAuthor { get; set; }

        [JsonProperty("module_dynamic")]
        public ModuleDynamic ModuleDynamic { get; set; }
    }

    public partial class UserSpaceData
    {
        public static UserSpaceData FromJson(string json) => JsonConvert.DeserializeObject<UserSpaceData>(json, QuickType.UserSpaceData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserSpaceData self) => JsonConvert.SerializeObject(self, QuickType.UserSpaceData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
