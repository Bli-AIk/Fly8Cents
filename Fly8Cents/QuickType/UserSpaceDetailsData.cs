// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var userSpaceDetailsData = UserSpaceDetailsData.FromJson(jsonString);

namespace QuickType.LazyComment.Buvid3.UserSpaceDetails
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UserSpaceDetailsData
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("message")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Message { get; set; }

        [JsonProperty("ttl")]
        public long Ttl { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("mid")]
        public long Mid { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("sex")]
        public string Sex { get; set; }

        [JsonProperty("face")]
        public Uri Face { get; set; }

        [JsonProperty("face_nft")]
        public long FaceNft { get; set; }

        [JsonProperty("face_nft_type")]
        public long FaceNftType { get; set; }

        [JsonProperty("sign")]
        public Uri Sign { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("jointime")]
        public long Jointime { get; set; }

        [JsonProperty("moral")]
        public long Moral { get; set; }

        [JsonProperty("silence")]
        public long Silence { get; set; }

        [JsonProperty("coins")]
        public long Coins { get; set; }

        [JsonProperty("fans_badge")]
        public bool FansBadge { get; set; }

        [JsonProperty("fans_medal")]
        public FansMedal FansMedal { get; set; }

        [JsonProperty("official")]
        public Official Official { get; set; }

        [JsonProperty("vip")]
        public Vip Vip { get; set; }

        [JsonProperty("pendant")]
        public Pendant Pendant { get; set; }

        [JsonProperty("nameplate")]
        public Nameplate Nameplate { get; set; }

        [JsonProperty("user_honour_info")]
        public UserHonourInfo UserHonourInfo { get; set; }

        [JsonProperty("is_followed")]
        public bool IsFollowed { get; set; }

        [JsonProperty("top_photo")]
        public Uri TopPhoto { get; set; }

        [JsonProperty("theme")]
        public SysNotice Theme { get; set; }

        [JsonProperty("sys_notice")]
        public SysNotice SysNotice { get; set; }

        [JsonProperty("live_room")]
        public LiveRoom LiveRoom { get; set; }

        [JsonProperty("birthday")]
        public string Birthday { get; set; }

        [JsonProperty("school")]
        public School School { get; set; }

        [JsonProperty("profession")]
        public Profession Profession { get; set; }

        [JsonProperty("tags")]
        public object Tags { get; set; }

        [JsonProperty("series")]
        public Series Series { get; set; }

        [JsonProperty("is_senior_member")]
        public long IsSeniorMember { get; set; }

        [JsonProperty("mcn_info")]
        public object McnInfo { get; set; }

        [JsonProperty("gaia_res_type")]
        public long GaiaResType { get; set; }

        [JsonProperty("gaia_data")]
        public object GaiaData { get; set; }

        [JsonProperty("is_risk")]
        public bool IsRisk { get; set; }

        [JsonProperty("elec")]
        public Elec Elec { get; set; }

        [JsonProperty("contract")]
        public Contract Contract { get; set; }

        [JsonProperty("certificate_show")]
        public bool CertificateShow { get; set; }

        [JsonProperty("name_render")]
        public object NameRender { get; set; }
    }

    public partial class Contract
    {
        [JsonProperty("is_display")]
        public bool IsDisplay { get; set; }

        [JsonProperty("is_follow_display")]
        public bool IsFollowDisplay { get; set; }
    }

    public partial class Elec
    {
        [JsonProperty("show_info")]
        public ShowInfo ShowInfo { get; set; }
    }

    public partial class ShowInfo
    {
        [JsonProperty("show")]
        public bool Show { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("jump_url")]
        public string JumpUrl { get; set; }
    }

    public partial class FansMedal
    {
        [JsonProperty("show")]
        public bool Show { get; set; }

        [JsonProperty("wear")]
        public bool Wear { get; set; }

        [JsonProperty("medal")]
        public Medal Medal { get; set; }
    }

    public partial class Medal
    {
        [JsonProperty("uid")]
        public long Uid { get; set; }

        [JsonProperty("target_id")]
        public long TargetId { get; set; }

        [JsonProperty("medal_id")]
        public long MedalId { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("medal_name")]
        public string MedalName { get; set; }

        [JsonProperty("medal_color")]
        public long MedalColor { get; set; }

        [JsonProperty("intimacy")]
        public long Intimacy { get; set; }

        [JsonProperty("next_intimacy")]
        public long NextIntimacy { get; set; }

        [JsonProperty("day_limit")]
        public long DayLimit { get; set; }

        [JsonProperty("today_feed")]
        public long TodayFeed { get; set; }

        [JsonProperty("medal_color_start")]
        public long MedalColorStart { get; set; }

        [JsonProperty("medal_color_end")]
        public long MedalColorEnd { get; set; }

        [JsonProperty("medal_color_border")]
        public long MedalColorBorder { get; set; }

        [JsonProperty("is_lighted")]
        public long IsLighted { get; set; }

        [JsonProperty("guard_level")]
        public long GuardLevel { get; set; }

        [JsonProperty("light_status")]
        public long LightStatus { get; set; }

        [JsonProperty("wearing_status")]
        public long WearingStatus { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }
    }

    public partial class LiveRoom
    {
        [JsonProperty("roomStatus")]
        public long RoomStatus { get; set; }

        [JsonProperty("liveStatus")]
        public long LiveStatus { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("cover")]
        public Uri Cover { get; set; }

        [JsonProperty("roomid")]
        public long Roomid { get; set; }

        [JsonProperty("roundStatus")]
        public long RoundStatus { get; set; }

        [JsonProperty("broadcast_type")]
        public long BroadcastType { get; set; }

        [JsonProperty("watched_show")]
        public WatchedShow WatchedShow { get; set; }
    }

    public partial class WatchedShow
    {
        [JsonProperty("switch")]
        public bool Switch { get; set; }

        [JsonProperty("num")]
        public long Num { get; set; }

        [JsonProperty("text_small")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TextSmall { get; set; }

        [JsonProperty("text_large")]
        public string TextLarge { get; set; }

        [JsonProperty("icon")]
        public Uri Icon { get; set; }

        [JsonProperty("icon_location")]
        public string IconLocation { get; set; }

        [JsonProperty("icon_web")]
        public Uri IconWeb { get; set; }
    }

    public partial class Nameplate
    {
        [JsonProperty("nid")]
        public long Nid { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("image_small")]
        public Uri ImageSmall { get; set; }

        [JsonProperty("level")]
        public string Level { get; set; }

        [JsonProperty("condition")]
        public string Condition { get; set; }
    }

    public partial class Official
    {
        [JsonProperty("role")]
        public long Role { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Pendant
    {
        [JsonProperty("pid")]
        public long Pid { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("expire")]
        public long Expire { get; set; }

        [JsonProperty("image_enhance")]
        public Uri ImageEnhance { get; set; }

        [JsonProperty("image_enhance_frame")]
        public Uri ImageEnhanceFrame { get; set; }

        [JsonProperty("n_pid")]
        public long NPid { get; set; }
    }

    public partial class Profession
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("department")]
        public string Department { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("is_show")]
        public long IsShow { get; set; }
    }

    public partial class School
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Series
    {
        [JsonProperty("user_upgrade_status")]
        public long UserUpgradeStatus { get; set; }

        [JsonProperty("show_upgrade_window")]
        public bool ShowUpgradeWindow { get; set; }
    }

    public partial class SysNotice
    {
    }

    public partial class UserHonourInfo
    {
        [JsonProperty("mid")]
        public long Mid { get; set; }

        [JsonProperty("colour")]
        public object Colour { get; set; }

        [JsonProperty("tags")]
        public object[] Tags { get; set; }

        [JsonProperty("is_latest_100honour")]
        public long IsLatest100Honour { get; set; }
    }

    public partial class Vip
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("due_date")]
        public long DueDate { get; set; }

        [JsonProperty("vip_pay_type")]
        public long VipPayType { get; set; }

        [JsonProperty("theme_type")]
        public long ThemeType { get; set; }

        [JsonProperty("label")]
        public Label Label { get; set; }

        [JsonProperty("avatar_subscript")]
        public long AvatarSubscript { get; set; }

        [JsonProperty("nickname_color")]
        public string NicknameColor { get; set; }

        [JsonProperty("role")]
        public long Role { get; set; }

        [JsonProperty("avatar_subscript_url")]
        public string AvatarSubscriptUrl { get; set; }

        [JsonProperty("tv_vip_status")]
        public long TvVipStatus { get; set; }

        [JsonProperty("tv_vip_pay_type")]
        public long TvVipPayType { get; set; }

        [JsonProperty("tv_due_date")]
        public long TvDueDate { get; set; }

        [JsonProperty("avatar_icon")]
        public AvatarIcon AvatarIcon { get; set; }
    }

    public partial class AvatarIcon
    {
        [JsonProperty("icon_type")]
        public long IconType { get; set; }

        [JsonProperty("icon_resource")]
        public SysNotice IconResource { get; set; }
    }

    public partial class Label
    {
        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("label_theme")]
        public string LabelTheme { get; set; }

        [JsonProperty("text_color")]
        public string TextColor { get; set; }

        [JsonProperty("bg_style")]
        public long BgStyle { get; set; }

        [JsonProperty("bg_color")]
        public string BgColor { get; set; }

        [JsonProperty("border_color")]
        public string BorderColor { get; set; }

        [JsonProperty("use_img_label")]
        public bool UseImgLabel { get; set; }

        [JsonProperty("img_label_uri_hans")]
        public Uri ImgLabelUriHans { get; set; }

        [JsonProperty("img_label_uri_hant")]
        public string ImgLabelUriHant { get; set; }

        [JsonProperty("img_label_uri_hans_static")]
        public Uri ImgLabelUriHansStatic { get; set; }

        [JsonProperty("img_label_uri_hant_static")]
        public Uri ImgLabelUriHantStatic { get; set; }
    }

    public partial class UserSpaceDetailsData
    {
        public static UserSpaceDetailsData FromJson(string json) => JsonConvert.DeserializeObject<UserSpaceDetailsData>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserSpaceDetailsData self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
